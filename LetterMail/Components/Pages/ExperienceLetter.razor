@page "/experience-letter"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Threading.Tasks
@using iText.Html2pdf
@inject IEmailService EmailService
@rendermode InteractiveServer

<h3>Send Experience Letter</h3>

<EditForm Model="@experienceLetter" OnValidSubmit="SendExperienceLetter">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div style="max-width: 400px; margin: auto; padding: 20px; border: 1px solid #ccc; border-radius: 10px; background-color: #f9f9f9;">
        <div style="display: flex; flex-direction: column; gap: 20px;">
            <div style="display: flex; flex-direction: column;">
                <label for="recipientEmail" style="font-weight: bold;">Recipient Email:</label>
                <InputText id="recipientEmail" @bind-Value="experienceLetter.RecipientEmail" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.RecipientEmail)" style="color: red; margin-top: 5px;" />
            </div>

            <div style="display: flex; flex-direction: column;">
                <label for="employeeName" style="font-weight: bold;">Employee Name:</label>
                <InputText id="employeeName" @bind-Value="experienceLetter.EmployeeName" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.EmployeeName)" style="color: red; margin-top: 5px;" />
            </div>

            <div style="display: flex; flex-direction: column;">
                <label for="employeeID" style="font-weight: bold;">Employee ID:</label>
                <InputText id="employeeID" @bind-Value="experienceLetter.EmployeeID" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.EmployeeID)" style="color: red; margin-top: 5px;" />
            </div>

            <div style="display: flex; flex-direction: column;">
                <label for="companyName" style="font-weight: bold;">Company Name:</label>
                <InputText id="companyName" @bind-Value="experienceLetter.CompanyName" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.CompanyName)" style="color: red; margin-top: 5px;" />
            </div>

            <div style="display: flex; flex-direction: column;">
                <label for="startDate" style="font-weight: bold;">Start Date:</label>
                <InputDate id="startDate" @bind-Value="experienceLetter.StartDate" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.StartDate)" style="color: red; margin-top: 5px;" />
            </div>

            <div style="display: flex; flex-direction: column;">
                <label for="endDate" style="font-weight: bold;">End Date:</label>
                <InputDate id="endDate" @bind-Value="experienceLetter.EndDate" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.EndDate)" style="color: red; margin-top: 5px;" />
            </div>

            <div style="display: flex; flex-direction: column;">
                <label for="position" style="font-weight: bold;">Position:</label>
                <InputText id="position" @bind-Value="experienceLetter.Position" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.Position)" style="color: red; margin-top: 5px;" />
            </div>

           

            <div style="display: flex; flex-direction: column;">
                <label for="gender" style="font-weight: bold;">Gender:</label>
                <InputText id="gender" @bind-Value="experienceLetter.Gender" style="padding: 5px; border-radius: 5px; border: 1px solid #ccc;" />
                <ValidationMessage For="@(() => experienceLetter.Gender)" style="color: red; margin-top: 5px;" />
            </div>

            <button type="submit" style="padding: 10px 20px; border: none; border-radius: 5px; background-color: #007bff; color: white; font-weight: bold; cursor: pointer;">
                Send Experience Letter
            </button>

            @if (isEmailSent)
            {
                <div style="margin-top: 20px; padding: 10px; background-color: #dff0d8; color: #3c763d; border-radius: 5px;">
                    Experience letter has been sent successfully!
                </div>
            }
        </div>
    </div>
</EditForm>

@code {
    private ExperienceLetterModel experienceLetter = new ExperienceLetterModel();
    private bool isEmailSent = false;

    private async Task SendExperienceLetter()
    {
        if (string.IsNullOrWhiteSpace(experienceLetter.RecipientEmail))
        {
            Console.WriteLine("Recipient email address cannot be null or empty.");
            return;
        }

        isEmailSent = true;
        var toEmail = experienceLetter.RecipientEmail;
        var subject = "TO WHOMSOEVER IT MAY CONCERN";
        var pronoun = experienceLetter.Gender?.ToLower() == "female" ? "her" : "his";
        var pronouns = experienceLetter.Gender?.ToLower() == "female" ? "she" : "he";

        var htmlContent = $@"
<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>To Whomsoever It May Concern</title>
    <style>
        .body {{ font-family: Times New Roman, sans-serif; margin: 0px; font-size: 14px; color: black; line-height: 1.6; }}
        .container {{ max-width: 800px; margin: auto; padding: 15px; }}
        .header {{ display: flex; align-items: flex-start; padding-left: -50px; }}
        .header img {{ max-width: 750px; }}
        .content {{ margin-top: 40px; padding: 10px; background-color: rgba(255,255,255,0.8); background-image: url('https://i.postimg.cc/Gm8t50cB/Backg.jpg'); background-size: 80%; background-repeat: no-repeat; background-position: center; background-blend-mode: lighten; }}
        .content p {{ margin: 20px 0; text-align: justify; font-size: 16px; line-height: 1.8; }}
        .content h3 {{ text-align: center; margin-top: 0; font-size: 20px; line-height: 1.4; }}
        .content .bold {{ font-weight: bold; }}
        .signature-section {{ margin-top: 100px; text-align: left; }}
        .signature-section p {{ margin: 0; font-size: 16px; line-height: 1.6; }}
        .signature-section .gap {{ margin-bottom: 10px; }}
        .signature-content img {{ max-width: 200px; height: auto; }}
        .footer {{ text-align: bottom-center; margin-top: 60px; }}
        .footer img {{ max-width: 100%; height: auto; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <a href='https://vaaradhiitservices.com/' target='_blank'><img src='https://i.postimg.cc/7hkSxHZQ/header.png' border='0' alt='company-logo' /></a>
        </div>
        <div class='content'>
            <h3>TO WHOMSOVER IT MAY CONCERN</h3>
            <p class='bold'>Date: {DateTime.Now:dd/MM/yyyy}</p>
            <p>This is to certify that <span class='bold'>{experienceLetter.EmployeeName}</span>, <span class='bold'>Employee ID- {experienceLetter.EmployeeID}</span>, has been employed at <span class='bold'>{experienceLetter.CompanyName}</span>, as a <span class='bold'>{experienceLetter.Position}</span> during the period <span class='bold'>{experienceLetter.StartDate:dd/MM/yyyy}</span> to <span class='bold'>{experienceLetter.EndDate:dd/MM/yyyy}</span>.</p>
            <p>During the tenure, <span class='bold'>{experienceLetter.EmployeeName}</span> has shown great amount of responsibility, sincerity and a genuine willingness to learn and zeal to take on new assignments & challenges. In particular, {pronoun} coordination skills and communication skills are par excellence and {pronoun} attention to details is impressive.</p>
            <p>We wish <span class='bold'>{experienceLetter.EmployeeName}</span> all success in {pronoun}  future endeavors.</p>
        </div>
        <div class='signature-section'>
                <div class='left'>
                    <p>With Regards,</p>
                    <p>For Vaaradhi Web & IT Services Pvt. Ltd.</p>
                    <div class='signature-content'>
                        <a href='https://vaaradhiitservices.com/' target='_blank'><img src='https://i.postimg.cc/rp4dzB36/Sign.png' border='0' alt='signature-1'/></a>
                        <p>Authorized Signatory</p>
                    </div>
                </div>
            </div>
        </div>
        <div class='footer'>
            <img src='https://i.postimg.cc/J4hGjDv5/Foot.png' alt='footer-image' />
        </div>
    </div>
</body>
</html>";

        // Generate the PDF
        var pdfContent = await GeneratePdfAsync(htmlContent);

        // Send the email with PDF attachment
        await EmailService.SendEmailWithAttachmentAsync(
            toEmail,
            subject,
            htmlContent, // HTML content as email body
            pdfContent,
            "certification.pdf" // Attachment filename
        );
    }


    private async Task<byte[]> GeneratePdfAsync(string htmlContent)
    {
        using (var memoryStream = new MemoryStream())
        {
            // Convert HTML to PDF and write to the memory stream
            HtmlConverter.ConvertToPdf(htmlContent, memoryStream);
            return memoryStream.ToArray();
        }
    }
    public class ExperienceLetterModel
    {
        [Required]
        public string RecipientEmail { get; set; }
        [Required]
        public string EmployeeName { get; set; }
        [Required]
        public string EmployeeID { get; set; }
        [Required]
        public string CompanyName { get; set; }
        [Required]
        public DateTime StartDate { get; set; }
        [Required]
        public DateTime EndDate { get; set; }
        [Required]
        public string Position { get; set; }

        [Required]
        public string Gender { get; set; }
    }
}
